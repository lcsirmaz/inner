Version 2.11
  - params.c, inner.c: new parameter MemoryLimit to abort algorithm when
     the total allocated memory exceeds this value (in Mbytes).
  - minor changes in reporting

Version 2.10
  - poly.c: bugfix in line 2005. When using threads and out of memory, don't
     start the while(1) loop
  - inner.c: 
     -- vertex pool is filled when there are VertexPoolMinFacets (1000)
        spare facets, even before hitting the VertexPoolAfter limit (20)
     -- when a vertex is on the positive side of a facet, try another facet
        three times (fighting numerical instability)
  - params.c: new parameter FacetReport to report final facets when found;
     improving short help and version info.

Version 2.9
  - params.c: improved help for exit values, signals, and some
     command-line options
  - poly.c: snapshot files are renamed to snapshot

Version 2.8
  - added DUMP_SIGNAL receiving which makes dump vertices and facest which
     can later used to continue the process (defined as SIGUSR2)
  - keyword --SaveFacets==2 affects the case when the data is known not
     to be consistent. Thus when running out of memory, facets are saved
     to the result file (giving a possibility to continue).
  - changing documentation, adding exit values to long help
  - no spaces around = when reporting non-default parameter values
  - inner.c: 
     -- reducing the number of gettime100() calls
     -- reporting to R_info checkpoints and dumps
     -- reporting to R_info when recalculating facets
     -- content of vertex pool is printed using lower case v
     -- in the output the number of columns and rows were labeled wrongly

Version 2.7
  improved error messages: no double message when the oracle fails;
  vertex numbers now refer to the printed numbers (and not the internal
  ones).
 - poly.c: when the new vertex is on the negative side of a final facet,
       then it seems to be a better strategy to clear the "final" flag
       rather than force the vertex onto that facet.
 - inner.c: when the new vertex is inside the inner approximation, then
       a) first recalculate all facets and retry; only when this happens
          right after the recalculation, abort the algorithm
       b) call add_new_vertex() first, then call other maintenance routines
          such as recalculate_facets() and check_consistency()
       c) when the problem is unbounded, dump and save partial result, as
          this can indicate a numerical error as well

Version 2.6
  new return values for the main program:
     0: program completed
     1: some error before starting the algorithm (argument syntax,
          wrong file, out of memory, etc)
     2: the solution space is empty
     3: the solution space is unbounded in some objective direction
     4: error while executing the algorithm (oracle error, numerical
          error, out of memory, etc)
     5: problem was interrupted by using the USR1 signal
 - inner.c: facet equation is now renormed before deciding whether a vertex
       is on the facet or not.
 - poly.c: improving error message when a vertex added second time.

Version 2.5
 - inner.c: filling vertexpool is done in a separate routine, which
      is called when using the --resume=<chk-file> argument
      some cosmetic changes in comments
      report_new_vertex() calls flush_report() only when printed something
      printed vertices from the vertexpool start with V
      typo in fill_vertexpool() is corrected
 - params.c: some cosmetic changes in the help texts
 - poly.c: 
      a) abort computation when the new vertex is not outside of the 
         approximating polytope -- refined to check duplicate addition
         of the same vertex
      b) move forward memory handling routines.
      c) thread memory handling talloc and trequest do not return values
      d) new macro get_memory_ptr() is used to retrieve the memory in
         the slots
      e) dd_stats.vertexno now increased with the first vertex added

Version 2.4
 - data.h, data.c: new modules to handle character input for --boot
      and for --resume files
 - params.h: new keyword CheckPoint, and argument CheckPointStub
 - params.c: added CheckPoint keyword; -oc <filestub> and 
      --resume=<checkpoint-file> command line arguments
 - inner.c:
      a) chktime, chkdelay now check when the checkpoint files should
         be written
      b) next_vertex_coords() reads vertices from the boot file until
         there are vertices in it
      c) handle_new_vertex() no makes checkpoints when expired
      d) in inner(), inp_type stores the input type: it is from a boot
         file, form a checkpoint file, or none. Added new logic to handle
         these cases
      e) VertexPool saved, not only printed 
 - poly.h: added dd_stats.vertexno, and new routines to store initial
         set of vertices and facets.
 - poly.c:
      a) procedire facet_num() uses a faster counting method
      b) new procedures make_checkpoint(), initial_vertex(), initial_facet()
      c) init_dd() is split into init_dd_structure() and adding 
         the initial vertex and facets when starting with a single point.
      d) dd_stats.vertexno counts the number of vertices, 
         dd_stats.iterations counts the number of iterations.
 - report.h: new output channel R_chk
 - report.c: new routines open_checkpoint() and close_checkpoint()
         R_warn does not flushes the output, only R_info

Version 2.3
 - params.h: added constants MAX_VERTEX_POOL and MAX_OCALL_LIMIT and
       string parameters BootFile and ResumeFile
 - params.c: 
      a) the default value now Threads=0 means that the number of
         available cores are determined automatically
      b) new keyword OracleCallLimit determines how many extra oracle
         calls are allowed when filling the vertexpool.
      c) undocumented --boot <bootfile> argument
      d) when a file name is the empty string, replace it by NULL
 - inner.c:
      a) when creating a partial list of vertices, the content of the
         vertex pool is dumped as well
      b) the VertexPool filling method changed: copying is done only when
         a new vertex is added; when the vertex is repeated, the new
         facet is copied over the old one; the number of extra oracle calls
         is limited by the OracleCallLimit parameter
      c) wrapped inside #ifdef BOOTPARAM, vertices from the file after --boot=
         are first added as if they were generated by the algorithm.
      d) reporting pool size is now at "progress report" level
      e) pool size is not reported while filling the pool
 - poly.c:
      a) when printing a facet, the line starts with F or f depending whether
         the facet is final or not.

Version 2.2
 - poly.c: in stop_threads() the main thread (numbered zero) should
        not be released by calling pthread_join().
        Correcting some typos in comments

Version 2.1
 - poly.c: a new vertex should be on the non-negative side of
        all final facets. This condition might be violated due
        to rounding errors. It is checked and an error message
        is issued.

Version 2.0
 Multithread support to speed up vertex enumeration.
 - version.h: adding a T before the version string when compiled
       with threads enabled.
 - inner.c: starting threads when entering and stopping them
       when leaving the inner() routine
 - params.h: new keyword Threads
 - params.h: #define MAX_THREADS gives the built-in bound on
       thread numbers.
 - params.c: defining Threads as a new keyword specifying how
       many threads should start by default.
 - params.c: formatting line length in the default config file
 - poly.h: add prototype for create_threads() and stop_threads()
 - poly.c: main rewriting, unifying variable and array names.
       Thread specific code used when USETHREADS defined. The
       port was done by E.P. Csirmaz

Version 1.7
 - poly.c: splitting memory handling to ease multithread porting
       newly created facets are collected in a separate area and
       move from there to their final place.

Version 1.6
 - main.c: changing the SIGINT (Ctrl+C) signal to SIGUSR1; can
    be set during compile time by defining INNER_SIGNAL
 - poly.c: moving documentation before the procedures
 - poly.c: new (and faster) method is implemented; thanks to
    Elod Csirmaz (https://github.com/csirmaz)
 - poly.c: extending bitcount to 1023 *(10 bits) from 8 bits
 - unused memory slots are deleted
 - inner.c: print the "non-default parameters" headline only
       if there was some change
 - inner.c: check that the number of objectives is at least 2
 - inner.c: changing output channel from R_info to R_warn
 - params.c: setting the default MessageLevel to 2
       added the undocumented keyword TrueRandom to ease testing

Version 1.5
 - Changing the default to ShowParams=1 and RandomFacet=1
 - When MessageLevel=3 the progress report shows three more
   values: how many facets go through the vertex just added
   (value after eq:), how many facets have been thrown (out:)
   and how many new facets are added (new:)
 - New heuristics added: keep a vertex pool and choose the
   vertex which produces the largest number of "out" facets.
   The value of the new keyword VertexPoolSize determines the
   size of the pool; the default value is 0, which means no
   pool.

